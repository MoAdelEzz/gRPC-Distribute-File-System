// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: master-tracker/client/client.proto

package gRPC_Distribute_File_System

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master2ClientServices_SelectMachineToCopyTo_FullMethodName = "/gRPC_DFS.Master2ClientServices/SelectMachineToCopyTo"
	Master2ClientServices_GetSourceMachine_FullMethodName      = "/gRPC_DFS.Master2ClientServices/GetSourceMachine"
)

// Master2ClientServicesClient is the client API for Master2ClientServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Master2ClientServicesClient interface {
	SelectMachineToCopyTo(ctx context.Context, in *SelectMachineRequest, opts ...grpc.CallOption) (*SelectMachineResponse, error)
	GetSourceMachine(ctx context.Context, in *GetSourceMachineRequest, opts ...grpc.CallOption) (*GetSourceMachineResponse, error)
}

type master2ClientServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMaster2ClientServicesClient(cc grpc.ClientConnInterface) Master2ClientServicesClient {
	return &master2ClientServicesClient{cc}
}

func (c *master2ClientServicesClient) SelectMachineToCopyTo(ctx context.Context, in *SelectMachineRequest, opts ...grpc.CallOption) (*SelectMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectMachineResponse)
	err := c.cc.Invoke(ctx, Master2ClientServices_SelectMachineToCopyTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *master2ClientServicesClient) GetSourceMachine(ctx context.Context, in *GetSourceMachineRequest, opts ...grpc.CallOption) (*GetSourceMachineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSourceMachineResponse)
	err := c.cc.Invoke(ctx, Master2ClientServices_GetSourceMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Master2ClientServicesServer is the server API for Master2ClientServices service.
// All implementations must embed UnimplementedMaster2ClientServicesServer
// for forward compatibility.
type Master2ClientServicesServer interface {
	SelectMachineToCopyTo(context.Context, *SelectMachineRequest) (*SelectMachineResponse, error)
	GetSourceMachine(context.Context, *GetSourceMachineRequest) (*GetSourceMachineResponse, error)
	mustEmbedUnimplementedMaster2ClientServicesServer()
}

// UnimplementedMaster2ClientServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaster2ClientServicesServer struct{}

func (UnimplementedMaster2ClientServicesServer) SelectMachineToCopyTo(context.Context, *SelectMachineRequest) (*SelectMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectMachineToCopyTo not implemented")
}
func (UnimplementedMaster2ClientServicesServer) GetSourceMachine(context.Context, *GetSourceMachineRequest) (*GetSourceMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceMachine not implemented")
}
func (UnimplementedMaster2ClientServicesServer) mustEmbedUnimplementedMaster2ClientServicesServer() {}
func (UnimplementedMaster2ClientServicesServer) testEmbeddedByValue()                               {}

// UnsafeMaster2ClientServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Master2ClientServicesServer will
// result in compilation errors.
type UnsafeMaster2ClientServicesServer interface {
	mustEmbedUnimplementedMaster2ClientServicesServer()
}

func RegisterMaster2ClientServicesServer(s grpc.ServiceRegistrar, srv Master2ClientServicesServer) {
	// If the following call pancis, it indicates UnimplementedMaster2ClientServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master2ClientServices_ServiceDesc, srv)
}

func _Master2ClientServices_SelectMachineToCopyTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Master2ClientServicesServer).SelectMachineToCopyTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master2ClientServices_SelectMachineToCopyTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Master2ClientServicesServer).SelectMachineToCopyTo(ctx, req.(*SelectMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master2ClientServices_GetSourceMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Master2ClientServicesServer).GetSourceMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master2ClientServices_GetSourceMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Master2ClientServicesServer).GetSourceMachine(ctx, req.(*GetSourceMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master2ClientServices_ServiceDesc is the grpc.ServiceDesc for Master2ClientServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master2ClientServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC_DFS.Master2ClientServices",
	HandlerType: (*Master2ClientServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectMachineToCopyTo",
			Handler:    _Master2ClientServices_SelectMachineToCopyTo_Handler,
		},
		{
			MethodName: "GetSourceMachine",
			Handler:    _Master2ClientServices_GetSourceMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master-tracker/client/client.proto",
}
