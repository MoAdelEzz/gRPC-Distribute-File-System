// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: master-tracker/datakeeper/datakeeper.proto

package gRPC_Distribute_File_System

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master2DatakeeperServices_RegisterFile_FullMethodName = "/gRPC_DFS.Master2DatakeeperServices/RegisterFile"
	Master2DatakeeperServices_HeartBeat_FullMethodName    = "/gRPC_DFS.Master2DatakeeperServices/HeartBeat"
)

// Master2DatakeeperServicesClient is the client API for Master2DatakeeperServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Master2DatakeeperServicesClient interface {
	RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
}

type master2DatakeeperServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMaster2DatakeeperServicesClient(cc grpc.ClientConnInterface) Master2DatakeeperServicesClient {
	return &master2DatakeeperServicesClient{cc}
}

func (c *master2DatakeeperServicesClient) RegisterFile(ctx context.Context, in *RegisterFileRequest, opts ...grpc.CallOption) (*RegisterFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterFileResponse)
	err := c.cc.Invoke(ctx, Master2DatakeeperServices_RegisterFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *master2DatakeeperServicesClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartBeatResponse)
	err := c.cc.Invoke(ctx, Master2DatakeeperServices_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Master2DatakeeperServicesServer is the server API for Master2DatakeeperServices service.
// All implementations must embed UnimplementedMaster2DatakeeperServicesServer
// for forward compatibility.
type Master2DatakeeperServicesServer interface {
	RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error)
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	mustEmbedUnimplementedMaster2DatakeeperServicesServer()
}

// UnimplementedMaster2DatakeeperServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaster2DatakeeperServicesServer struct{}

func (UnimplementedMaster2DatakeeperServicesServer) RegisterFile(context.Context, *RegisterFileRequest) (*RegisterFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFile not implemented")
}
func (UnimplementedMaster2DatakeeperServicesServer) HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedMaster2DatakeeperServicesServer) mustEmbedUnimplementedMaster2DatakeeperServicesServer() {
}
func (UnimplementedMaster2DatakeeperServicesServer) testEmbeddedByValue() {}

// UnsafeMaster2DatakeeperServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Master2DatakeeperServicesServer will
// result in compilation errors.
type UnsafeMaster2DatakeeperServicesServer interface {
	mustEmbedUnimplementedMaster2DatakeeperServicesServer()
}

func RegisterMaster2DatakeeperServicesServer(s grpc.ServiceRegistrar, srv Master2DatakeeperServicesServer) {
	// If the following call pancis, it indicates UnimplementedMaster2DatakeeperServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master2DatakeeperServices_ServiceDesc, srv)
}

func _Master2DatakeeperServices_RegisterFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Master2DatakeeperServicesServer).RegisterFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master2DatakeeperServices_RegisterFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Master2DatakeeperServicesServer).RegisterFile(ctx, req.(*RegisterFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master2DatakeeperServices_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Master2DatakeeperServicesServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master2DatakeeperServices_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Master2DatakeeperServicesServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Master2DatakeeperServices_ServiceDesc is the grpc.ServiceDesc for Master2DatakeeperServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master2DatakeeperServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC_DFS.Master2DatakeeperServices",
	HandlerType: (*Master2DatakeeperServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterFile",
			Handler:    _Master2DatakeeperServices_RegisterFile_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _Master2DatakeeperServices_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master-tracker/datakeeper/datakeeper.proto",
}
