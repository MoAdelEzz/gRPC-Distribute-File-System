// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: datakeeper/datakeeper.proto

package gRPC_Distribute_File_System

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatakeeperServices_GetResidentFiles_FullMethodName     = "/gRPC_DFS.DatakeeperServices/GetResidentFiles"
	DatakeeperServices_GetFileTransferState_FullMethodName = "/gRPC_DFS.DatakeeperServices/GetFileTransferState"
)

// DatakeeperServicesClient is the client API for DatakeeperServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatakeeperServicesClient interface {
	GetResidentFiles(ctx context.Context, in *ResidentFilesRequest, opts ...grpc.CallOption) (*ResidentFilesResponse, error)
	GetFileTransferState(ctx context.Context, in *FileTransferStateRequset, opts ...grpc.CallOption) (*FileTransferStateResponse, error)
}

type datakeeperServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewDatakeeperServicesClient(cc grpc.ClientConnInterface) DatakeeperServicesClient {
	return &datakeeperServicesClient{cc}
}

func (c *datakeeperServicesClient) GetResidentFiles(ctx context.Context, in *ResidentFilesRequest, opts ...grpc.CallOption) (*ResidentFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResidentFilesResponse)
	err := c.cc.Invoke(ctx, DatakeeperServices_GetResidentFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datakeeperServicesClient) GetFileTransferState(ctx context.Context, in *FileTransferStateRequset, opts ...grpc.CallOption) (*FileTransferStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileTransferStateResponse)
	err := c.cc.Invoke(ctx, DatakeeperServices_GetFileTransferState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatakeeperServicesServer is the server API for DatakeeperServices service.
// All implementations must embed UnimplementedDatakeeperServicesServer
// for forward compatibility.
type DatakeeperServicesServer interface {
	GetResidentFiles(context.Context, *ResidentFilesRequest) (*ResidentFilesResponse, error)
	GetFileTransferState(context.Context, *FileTransferStateRequset) (*FileTransferStateResponse, error)
	mustEmbedUnimplementedDatakeeperServicesServer()
}

// UnimplementedDatakeeperServicesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatakeeperServicesServer struct{}

func (UnimplementedDatakeeperServicesServer) GetResidentFiles(context.Context, *ResidentFilesRequest) (*ResidentFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResidentFiles not implemented")
}
func (UnimplementedDatakeeperServicesServer) GetFileTransferState(context.Context, *FileTransferStateRequset) (*FileTransferStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileTransferState not implemented")
}
func (UnimplementedDatakeeperServicesServer) mustEmbedUnimplementedDatakeeperServicesServer() {}
func (UnimplementedDatakeeperServicesServer) testEmbeddedByValue()                            {}

// UnsafeDatakeeperServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatakeeperServicesServer will
// result in compilation errors.
type UnsafeDatakeeperServicesServer interface {
	mustEmbedUnimplementedDatakeeperServicesServer()
}

func RegisterDatakeeperServicesServer(s grpc.ServiceRegistrar, srv DatakeeperServicesServer) {
	// If the following call pancis, it indicates UnimplementedDatakeeperServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatakeeperServices_ServiceDesc, srv)
}

func _DatakeeperServices_GetResidentFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResidentFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatakeeperServicesServer).GetResidentFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatakeeperServices_GetResidentFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatakeeperServicesServer).GetResidentFiles(ctx, req.(*ResidentFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatakeeperServices_GetFileTransferState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileTransferStateRequset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatakeeperServicesServer).GetFileTransferState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatakeeperServices_GetFileTransferState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatakeeperServicesServer).GetFileTransferState(ctx, req.(*FileTransferStateRequset))
	}
	return interceptor(ctx, in, info, handler)
}

// DatakeeperServices_ServiceDesc is the grpc.ServiceDesc for DatakeeperServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatakeeperServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC_DFS.DatakeeperServices",
	HandlerType: (*DatakeeperServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResidentFiles",
			Handler:    _DatakeeperServices_GetResidentFiles_Handler,
		},
		{
			MethodName: "GetFileTransferState",
			Handler:    _DatakeeperServices_GetFileTransferState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datakeeper/datakeeper.proto",
}
